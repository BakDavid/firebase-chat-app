{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","type","props","messageClass","className","src","App","useAuthState","user","displayName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,qCACZC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOT,IAASS,OAChBC,EAAYV,IAASU,YAiB3B,SAASC,IAMP,OACE,wBAAQC,QANe,WACvB,IAAMC,EAAW,IAAIb,IAASS,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAIrB,iCAIJ,SAASG,IACP,OAAOP,EAAKQ,aACV,wBAAQL,QAAS,kBAAMH,EAAKS,WAA5B,sBAIJ,SAASC,IAEP,IAAMC,EAAQC,mBAERC,EAAcZ,EAAUa,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAGrD,EAAmBC,YAAkBH,EAAM,CAACI,QAAS,OAA9CC,EAAP,oBAEA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,yDAClBD,EAAEE,iBAEe,KAAdL,EAHe,yBAIUtB,EAAKQ,YAAvBoB,EAJQ,EAIRA,IAAKC,EAJG,EAIHA,SAJG,SAMVhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAWzC,IAASU,UAAUgC,WAAWC,kBACzCN,MACAC,aAVc,OAalBN,EAAa,IAEbZ,EAAMwB,QAAQC,eAAe,IAfX,2CAAH,sDAkBjB,OACE,qCACE,iCACGhB,GAAYA,EAASiB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OACvD,qBAAKC,IAAK/B,OAGZ,uBAAMgC,SAAUnB,EAAhB,UACE,uBAAOoB,MAAOtB,EAAWuB,SAAU,SAACpB,GAAD,OAAOF,EAAaE,EAAEqB,OAAOF,UAChE,wBAAQG,KAAK,SAAb,wBAMR,SAASR,EAAYS,GACnB,MAA4BA,EAAMR,QAA3BT,EAAP,EAAOA,KAAKF,EAAZ,EAAYA,SAENoB,EAFN,EAAqBrB,MAEQ5B,EAAKQ,YAAYoB,IAAM,OAAS,WAE7D,OACE,sBAAKsB,UAAS,kBAAaD,GAA3B,UACE,qBAAKE,IAAKtB,IACV,4BAAIE,OAKKqB,MA1Ff,WACE,MAAeC,YAAarD,GAArBsD,EAAP,oBACA,OACE,sBAAKJ,UAAU,MAAf,UACE,mCACE,+BAAKI,GAAQA,EAAKC,YAAlB,0CACA,cAAChD,EAAD,OAEF,kCACG+C,EAAO,cAAC5C,EAAD,IAAe,cAACR,EAAD,UCpBhBsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dbfe3fc4.chunk.js","sourcesContent":["import React, {useState,useRef} from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBgur3yxdtIne5ekjNPppRO-_lvcKEPFOk\",\n  authDomain: \"fir-chat-app-466b2.firebaseapp.com\",\n  projectId: \"fir-chat-app-466b2\",\n  storageBucket: \"fir-chat-app-466b2.appspot.com\",\n  messagingSenderId: \"201456430988\",\n  appId: \"1:201456430988:web:57495f4947c65b306bb0a9\",\n  measurementId: \"G-JGJS78MQYR\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>{user && user.displayName}‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn(){\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return(\n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nfunction SignOut(){\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\nfunction ChatRoom(){\n\n  const dummy = useRef()\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  // this field listens to any changes in database and updates messages\n  const [messages] = useCollectionData(query,{idField: 'id'});\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async(e) => {\n    e.preventDefault();\n\n    if(formValue !== ''){\n      const { uid, photoURL } = auth.currentUser;\n\n      await messagesRef.add({\n        text: formValue,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        photoURL\n      });\n    }\n    setFormValue('');\n\n    dummy.current.scrollIntoView({});\n  }\n\n  return(\n    <>\n      <main>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg}/>)}\n        <div ref={dummy}></div>\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e) => setFormValue(e.target.value)}/>\n        <button type=\"submit\">Send</button>\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props){\n  const {text,photoURL,uid} = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL}/>\n      <p>{text}</p>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}